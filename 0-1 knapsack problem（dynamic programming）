def knapsack(weights, values, capacity):
    n = len(weights)
    # Initialize a 2D array to store the maximum value that can be obtained
    # using the first i items and a knapsack capacity of j
    dp = [[0] * (capacity + 1) for _ in range(n + 1)]

    # Build the dp table bottom-up
    for i in range(1, n + 1):
        for j in range(1, capacity + 1):
            # If the current item's weight is greater than the capacity,
            # we cannot include it in the knapsack
            if weights[i - 1] > j:
                dp[i][j] = dp[i - 1][j]
            else:
                # Otherwise, we choose the maximum of including the current item
                # or excluding it
                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weights[i - 1]] + values[i - 1])

    # Traceback to find which items were selected
    selected_items = []
    i, j = n, capacity
    while i > 0 and j > 0:
        if dp[i][j] != dp[i - 1][j]:
            selected_items.append(i - 1)
            j -= weights[i - 1]
        i -= 1

    return dp[n][capacity], selected_items

# Example usage
weights = [2, 3, 4, 5]
values = [3, 4, 5, 6]
capacity = 8
max_value, selected_items = knapsack(weights, values, capacity)
print("Maximum value:", max_value)
print("Selected items:", selected_items)
